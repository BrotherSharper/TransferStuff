name: Build
on:
  workflow_call:
    inputs:
      name:
        description: "The name of the build, will be equal to the version if not given, will override the version if given"
        required: false
        type: string
        default: ""
      version:
        description: "The version number with a leading v. If not given it will default to the version field of the package.json file"
        required: false
        type: string
        default: ""
      prerelease_identifier:
        description: "The pre-release field according to the semver specification"
        required: false
        type: string
        default: ""
    outputs:
      name:
        value: ${{ jobs.build.outputs.name }}
        description: "The name given to the release"
      version:
        value: ${{ jobs.build.outputs.version }}
        description: "The computed version number"
      manifest_filename:
        value: ${{ jobs.build.outputs.manifest_filename }}
        description: "The name of the manifest artifact after download"
      archive_filename:
        value: ${{ jobs.build.outputs.archive_filename }}
        description: "The name of the archive artifact after download"
jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      name: ${{ steps.set_outputs.outputs.name }}
      version: ${{ steps.set_outputs.outputs.version }}
      manifest_filename: ${{ steps.set_outputs.outputs.manifest_filename }}
      archive_filename: ${{ steps.set_outputs.outputs.archive_filename }}
    steps:
      - uses: actions/checkout@v2
      # remove the leading "v" from the version string ("v1.2.3" -> "1.2.3")
      - run: |
          version=""
          if [ ! "${{inputs.version}}" ]
          then
            version=`jq -r .version package.json`
          else
            version=`echo ${{ inputs.version }} | cut -c 2-`
          fi
          
          if [ "${{inputs.prerelease_identifier}}" ]
          then
            version=$version-${{inputs.prerelease_identifier}}
          fi

          if [ ! "${{inputs.name}}" ]
          then
            name=$version
          else
            name=${{inputs.name}}
          fi

          echo "version=$version" >> $GITHUB_ENV
          echo "name=$name" >> $GITHUB_ENV
          echo name: $name, version: $version
      - name: Set outputs # so that they can be reused by caller if necessary
        id: set_outputs
        run: |
          echo "::set-output name=name::${{ env.name }}"
          echo "::set-output name=version::${{ env.version }}"
          echo "::set-output name=manifest_filename::module.json"
          echo "::set-output name=archive_filename::transfer-stuff-${{ env.name }}.zip"
      - name: Setup Node.js environment
        uses: actions/setup-node@v2.5.1
        with:
          node-version: '16'
      - run: npm install
      - run: npm run build
      - run: npm run packzip -- --set-version ${{ env.name }}
        env:
          NO_CHECK: 1
      - name: Upload module manifest
        uses: actions/upload-artifact@v2
        with:
          name: module-manifest
          path: releases/v${{ env.name }}/module.json
          if-no-files-found: error
      - name: Upload module archive
        uses: actions/upload-artifact@v2
        with:
          name: module-archive
          path: releases/v${{ env.name }}/transfer-stuff-${{ env.name }}.zip
          if-no-files-found: error